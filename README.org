#+TITLE: Webアプリ勉強

* ルーティング

Servlet API3.0から導入された@WebServletを使用する。
以下の例では、URL"/hello"へGETリクエストが送信された場合、HelloServlet#doGetが起動される。

#+BEGIN_SRC java
@WebServlet(urlPatterns = "/hello")
public class HelloServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {
    }
#+END_SRC


* バリデーション

BeanValidationを用いてバリデーションを行う。

** Beanを作成する

バリデーションを行うには、入れ物となるBeanを作成しアノテーションを付与する。

#+BEGIN_SRC java
public class Member {

    private String name;

    @NotEmpty(message = "名前は必須項目です。")
    @Size(max = 64, message = "名前は1〜64文字で入力してください。")
    public String getNameName() {
        return familyName;
    }
}
#+END_SRC

** Beanを生成する

バリデーションを実行するには、対象となるBeanインスタンスが必要である。
HttpServletRequestのパラメータからBeanを生成する。
ユーティリティクラスがあるので、それを利用する。

#+BEGIN_SRC java
Member member = SimpleBeanUtil.create(req.getParameterMap(), Member.class);
#+END_SRC

やっていることは単なる値の移送である。

** Validationを実行する

Beanのインスタンスが生成できたら、バリデーションを実行し、
そのインスタンスが妥当であるか確認する。

#+BEGIN_SRC java
ValidationResult<Member> result = ValidationExecutor.validate(member);
if (result.isError()) {
   // エラー時の処理...
}
#+END_SRC

ValidationExecutorは、BeanValidationを使用する際に必要となる定形処理を行う。
最終的にはjavax.validation.Validator実装を使用し、

- javax.validation.Validator#validate(T object, Class<?>... groups)

を呼び出してバリデーションを行っている。

内容は各自でソースコード確認すること。


* フォワード

JSP等にフォワードする場合は、SerlvetAPIを使用する。

#+BEGIN_SRC java
req.getRequestDispatcher("/path/to/forward.jsp")
   .forward(req, resp);
#+END_SRC
