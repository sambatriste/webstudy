* バリデーション

** バリデーションの種類
*** 単項目のバリデーション

入力項目単独で妥当であるか判定する。

- 共通
  - 必須（null/空文字）
- 文字列
  - 長さ
  - 文字種
- 数値
  - 桁数
  - 範囲
- 日付
  - 過去日
  - 未来日


*** 複数項目間のバリデーション

入力項目の関係が妥当であるか判定する。

- 条件付きバリデーション
  - コースを選択した場合、セットドリンクを選択しなければならない

- 前後・大小関係
  - 期間（開始～終了）
  - 最小ー最大


*** DBを使用するバリデーション

入力項目とシステムとの整合性を判定する。

- 存在チェック
  - 一意性制約違反

** バリデーションの方法

1箇所エラーがあったら処理終了、というのだと、
ユーザからすると、エラーを修正したらまた別のエラーが出ることになり、
ユーザビリティが極端に低下する。
各種バリデーションを実行して全ての結果を通知するように
可能な限りすべてのバリデーションを実行して通知する必要がある。

サンプルコードを見て分かる通り、プログラマティックにバリデーションを
実行するのはかなり冗長である。

例えば、メンバーIDが9桁であるとか名前が64文字以下といった処理が
画面毎（Form毎）に散在している。

BeanValidationは、アノテーションを使うことで
宣言的にバリデーションを定義できる（↔手続き的）。


** どこまでがバリデーションなのか？

例えば、カード入会申込みで年収が10円の人は
収入が低すぎるので入会できません、というのはバリデーションエラーなのか？
（エラー：年収が低すぎます）

偉い人の定義があるわけではないが、
あるビジネスロジック、例えばカード入会（与信）を行うとして
そのための入力が事前条件（名前が入力されていること、住所が…）を満たしているかどうかを
バリデーションと考えるとしっくりくるような気がする。

